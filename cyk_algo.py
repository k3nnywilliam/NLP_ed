# Cocke–Younger–Kasami algorithm (alternatively called CYK, or CKY) is a parsing algorithm for context-free grammars 
#Pseudocode below
'''
let the input be a string I consisting of n characters: a1 ... an.
let the grammar contain r nonterminal symbols R1 ... Rr, with start symbol R1.
let P[n,n,r] be an array of booleans. Initialize all elements of P to false.
     Initialize all elements of back to the empty list.

for each s = 1 to n
    for each unit production Rv → as
        set P[1,s,v] = true

for each l = 2 to n -- Length of span
    for each s = 1 to n-l+1 -- Start of span
        for each p = 1 to l-1 -- Partition of span
            for each production Ra    → Rb Rc
                if P[p,s,b] and P[l-p,s+p,c] then
                    set P[l,s,a] = true, 
                    append <p,b,c> to back[l,s,a]

if P[n,1,1] is true then
    I is member of language
    return back -- by retracing the steps through back, one can easily construct all possible parse trees of the string.
else
    return "not a member of language"
'''

def cyk_parse(grammar, input_string):
    words = input_string.split()
    n = len(words)
    
    # Initialize the CYK table as a 2D list of sets
    table = [[set() for _ in range(n)] for _ in range(n)]
    
    # Fill in the table with nonterminals that can generate terminal symbols
    for i in range(n):
        for nt, terminals in grammar.items():
            for term in terminals:
                if words[i] == term:
                    table[i][i].add(nt)
    
    # Fill in the table for substrings of length > 1
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            for k in range(i, j):
                for nt, productions in grammar.items():
                    for prod in productions:
                        if len(prod) == 2 and prod[0] in table[i][k] and prod[1] in table[k + 1][j]:
                            table[i][j].add(nt)
    
    # Check if the start symbol is in the top-right corner of the table
    return 'S' in table[0][n - 1]

# Example usage:
if __name__ == "__main__":
    # Define a CFG as a dictionary
    cfg = {
        'S': ['NP VP'],
        'NP': ['She', 'a fish', 'a fork'],
        'VP': ['eats NP', 'with NP'],
        'P': ['a'],
        'V': ['eats'],
    }

    # Input string to parse
    input_string = "She eats a fish with a fork"
    
    # Check if the input string can be generated by the CFG
    if cyk_parse(cfg, input_string):
        print(f"The input string '{input_string}' is accepted by the CFG.")
    else:
        print(f"The input string '{input_string}' is not accepted by the CFG.")
